{"ast":null,"code":"/* eslint-env browser */\n\n'use strict';\n\nrequire('./driver').set(require('./drivers/browser'));\nconst DocumentProvider = require('./documentProvider.js');\nDocumentProvider.setBrowser(true);\n\n/**\n * The [MongooseError](https://mongoosejs.com/docs/api/error.html#Error()) constructor.\n *\n * @method Error\n * @api public\n */\n\nexports.Error = require('./error/index');\n\n/**\n * The Mongoose [Schema](https://mongoosejs.com/docs/api/schema.html#Schema()) constructor\n *\n * #### Example:\n *\n *     const mongoose = require('mongoose');\n *     const Schema = mongoose.Schema;\n *     const CatSchema = new Schema(..);\n *\n * @method Schema\n * @api public\n */\n\nexports.Schema = require('./schema');\n\n/**\n * The various Mongoose Types.\n *\n * #### Example:\n *\n *     const mongoose = require('mongoose');\n *     const array = mongoose.Types.Array;\n *\n * #### Types:\n *\n * - [Array](https://mongoosejs.com/docs/schematypes.html#arrays)\n * - [Buffer](https://mongoosejs.com/docs/schematypes.html#buffers)\n * - [Embedded](https://mongoosejs.com/docs/schematypes.html#schemas)\n * - [DocumentArray](https://mongoosejs.com/docs/api/documentarraypath.html)\n * - [Decimal128](https://mongoosejs.com/docs/api/decimal128.html#Decimal128())\n * - [ObjectId](https://mongoosejs.com/docs/schematypes.html#objectids)\n * - [Map](https://mongoosejs.com/docs/schematypes.html#maps)\n * - [Subdocument](https://mongoosejs.com/docs/schematypes.html#schemas)\n *\n * Using this exposed access to the `ObjectId` type, we can construct ids on demand.\n *\n *     const ObjectId = mongoose.Types.ObjectId;\n *     const id1 = new ObjectId;\n *\n * @property Types\n * @api public\n */\nexports.Types = require('./types');\n\n/**\n * The Mongoose [VirtualType](https://mongoosejs.com/docs/api/virtualtype.html#VirtualType()) constructor\n *\n * @method VirtualType\n * @api public\n */\nexports.VirtualType = require('./virtualType');\n\n/**\n * The various Mongoose SchemaTypes.\n *\n * #### Note:\n *\n * _Alias of mongoose.Schema.Types for backwards compatibility._\n *\n * @property SchemaTypes\n * @see Schema.SchemaTypes https://mongoosejs.com/docs/api/schema.html#Schema.Types\n * @api public\n */\n\nexports.SchemaType = require('./schemaType.js');\n\n/**\n * Internal utils\n *\n * @property utils\n * @api private\n */\n\nexports.utils = require('./utils.js');\n\n/**\n * The Mongoose browser [Document](/api/document.html) constructor.\n *\n * @method Document\n * @api public\n */\nexports.Document = DocumentProvider();\n\n/**\n * Return a new browser model. In the browser, a model is just\n * a simplified document with a schema - it does **not** have\n * functions like `findOne()`, etc.\n *\n * @method model\n * @api public\n * @param {String} name\n * @param {Schema} schema\n * @return Class\n */\nexports.model = function (name, schema) {\n  class Model extends exports.Document {\n    constructor(obj, fields) {\n      super(obj, schema, fields);\n    }\n  }\n  Model.modelName = name;\n  return Model;\n};\n\n/*!\n * Module exports.\n */\n\nif (typeof window !== 'undefined') {\n  window.mongoose = module.exports;\n  window.Buffer = Buffer;\n}","map":{"version":3,"names":["require","set","DocumentProvider","setBrowser","exports","Error","Schema","Types","VirtualType","SchemaType","utils","Document","model","name","schema","Model","constructor","obj","fields","modelName","window","mongoose","module","Buffer"],"sources":["C:/Users/Prateek/Desktop/Project2/App/proj/node_modules/mongoose/lib/browser.js"],"sourcesContent":["/* eslint-env browser */\n\n'use strict';\n\nrequire('./driver').set(require('./drivers/browser'));\n\nconst DocumentProvider = require('./documentProvider.js');\n\nDocumentProvider.setBrowser(true);\n\n/**\n * The [MongooseError](https://mongoosejs.com/docs/api/error.html#Error()) constructor.\n *\n * @method Error\n * @api public\n */\n\nexports.Error = require('./error/index');\n\n/**\n * The Mongoose [Schema](https://mongoosejs.com/docs/api/schema.html#Schema()) constructor\n *\n * #### Example:\n *\n *     const mongoose = require('mongoose');\n *     const Schema = mongoose.Schema;\n *     const CatSchema = new Schema(..);\n *\n * @method Schema\n * @api public\n */\n\nexports.Schema = require('./schema');\n\n/**\n * The various Mongoose Types.\n *\n * #### Example:\n *\n *     const mongoose = require('mongoose');\n *     const array = mongoose.Types.Array;\n *\n * #### Types:\n *\n * - [Array](https://mongoosejs.com/docs/schematypes.html#arrays)\n * - [Buffer](https://mongoosejs.com/docs/schematypes.html#buffers)\n * - [Embedded](https://mongoosejs.com/docs/schematypes.html#schemas)\n * - [DocumentArray](https://mongoosejs.com/docs/api/documentarraypath.html)\n * - [Decimal128](https://mongoosejs.com/docs/api/decimal128.html#Decimal128())\n * - [ObjectId](https://mongoosejs.com/docs/schematypes.html#objectids)\n * - [Map](https://mongoosejs.com/docs/schematypes.html#maps)\n * - [Subdocument](https://mongoosejs.com/docs/schematypes.html#schemas)\n *\n * Using this exposed access to the `ObjectId` type, we can construct ids on demand.\n *\n *     const ObjectId = mongoose.Types.ObjectId;\n *     const id1 = new ObjectId;\n *\n * @property Types\n * @api public\n */\nexports.Types = require('./types');\n\n/**\n * The Mongoose [VirtualType](https://mongoosejs.com/docs/api/virtualtype.html#VirtualType()) constructor\n *\n * @method VirtualType\n * @api public\n */\nexports.VirtualType = require('./virtualType');\n\n/**\n * The various Mongoose SchemaTypes.\n *\n * #### Note:\n *\n * _Alias of mongoose.Schema.Types for backwards compatibility._\n *\n * @property SchemaTypes\n * @see Schema.SchemaTypes https://mongoosejs.com/docs/api/schema.html#Schema.Types\n * @api public\n */\n\nexports.SchemaType = require('./schemaType.js');\n\n/**\n * Internal utils\n *\n * @property utils\n * @api private\n */\n\nexports.utils = require('./utils.js');\n\n/**\n * The Mongoose browser [Document](/api/document.html) constructor.\n *\n * @method Document\n * @api public\n */\nexports.Document = DocumentProvider();\n\n/**\n * Return a new browser model. In the browser, a model is just\n * a simplified document with a schema - it does **not** have\n * functions like `findOne()`, etc.\n *\n * @method model\n * @api public\n * @param {String} name\n * @param {Schema} schema\n * @return Class\n */\nexports.model = function(name, schema) {\n  class Model extends exports.Document {\n    constructor(obj, fields) {\n      super(obj, schema, fields);\n    }\n  }\n  Model.modelName = name;\n\n  return Model;\n};\n\n/*!\n * Module exports.\n */\n\nif (typeof window !== 'undefined') {\n  window.mongoose = module.exports;\n  window.Buffer = Buffer;\n}\n"],"mappings":"AAAA;;AAEA,YAAY;;AAEZA,OAAO,CAAC,UAAU,CAAC,CAACC,GAAG,CAACD,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAErD,MAAME,gBAAgB,GAAGF,OAAO,CAAC,uBAAuB,CAAC;AAEzDE,gBAAgB,CAACC,UAAU,CAAC,IAAI,CAAC;;AAEjC;AACA;AACA;AACA;AACA;AACA;;AAEAC,OAAO,CAACC,KAAK,GAAGL,OAAO,CAAC,eAAe,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAI,OAAO,CAACE,MAAM,GAAGN,OAAO,CAAC,UAAU,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAI,OAAO,CAACG,KAAK,GAAGP,OAAO,CAAC,SAAS,CAAC;;AAElC;AACA;AACA;AACA;AACA;AACA;AACAI,OAAO,CAACI,WAAW,GAAGR,OAAO,CAAC,eAAe,CAAC;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAI,OAAO,CAACK,UAAU,GAAGT,OAAO,CAAC,iBAAiB,CAAC;;AAE/C;AACA;AACA;AACA;AACA;AACA;;AAEAI,OAAO,CAACM,KAAK,GAAGV,OAAO,CAAC,YAAY,CAAC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACAI,OAAO,CAACO,QAAQ,GAAGT,gBAAgB,CAAC,CAAC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,OAAO,CAACQ,KAAK,GAAG,UAASC,IAAI,EAAEC,MAAM,EAAE;EACrC,MAAMC,KAAK,SAASX,OAAO,CAACO,QAAQ,CAAC;IACnCK,WAAWA,CAACC,GAAG,EAAEC,MAAM,EAAE;MACvB,KAAK,CAACD,GAAG,EAAEH,MAAM,EAAEI,MAAM,CAAC;IAC5B;EACF;EACAH,KAAK,CAACI,SAAS,GAAGN,IAAI;EAEtB,OAAOE,KAAK;AACd,CAAC;;AAED;AACA;AACA;;AAEA,IAAI,OAAOK,MAAM,KAAK,WAAW,EAAE;EACjCA,MAAM,CAACC,QAAQ,GAAGC,MAAM,CAAClB,OAAO;EAChCgB,MAAM,CAACG,MAAM,GAAGA,MAAM;AACxB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}