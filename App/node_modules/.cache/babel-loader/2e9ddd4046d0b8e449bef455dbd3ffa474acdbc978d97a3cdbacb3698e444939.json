{"ast":null,"code":"// const SubStr= require('./substring');\nfunction SubStr(str_1, str_2) {\n  var f = 0;\n  var a = 0;\n  var y = false;\n  var h = true;\n  const str1 = str_1.toLowerCase().trim();\n  const str2 = str_2.toLowerCase().trim();\n  for (var i = 0; i <= str1.length - 1; i++) {\n    for (var j = a; j <= str2.length - 1; j++) {\n      if (h) {\n        if (str1[i] == str2[j]) {\n          a = j + 1;\n          f += 1;\n          y = true;\n          h = false;\n          break;\n        }\n      } else if (y) {\n        if (str1[i] == str2[j]) {\n          f += 1;\n          a = j + 1;\n          break;\n        } else {\n          y = false;\n          break;\n        }\n      }\n    }\n    if (!y) {\n      break;\n    }\n  }\n  if (f == str1.length) {\n    return true;\n  } else {\n    return false;\n  }\n}\n_c = SubStr;\nfunction Collt(st1, datas) {\n  var result;\n  result = datas.filter(data => {\n    var t = 0;\n    if (SubStr(st1, data.name)) {\n      t += 1;\n    }\n    return t > 0;\n  });\n  return result;\n}\n_c2 = Collt;\nmodule.exports.Collt = Collt;\nvar _c, _c2;\n$RefreshReg$(_c, \"SubStr\");\n$RefreshReg$(_c2, \"Collt\");","map":{"version":3,"names":["SubStr","str_1","str_2","f","a","y","h","str1","toLowerCase","trim","str2","i","length","j","_c","Collt","st1","datas","result","filter","data","t","name","_c2","module","exports","$RefreshReg$"],"sources":["C:/Users/Prateek/Desktop/Project2/App/proj/src/algos/collt.js"],"sourcesContent":["// const SubStr= require('./substring');\r\nfunction SubStr (str_1,str_2){\r\n    var f=0;\r\n   var a=0;\r\n   var y = false;\r\n   var h = true;\r\n   const str1 =str_1.toLowerCase().trim();\r\n   const str2 =str_2.toLowerCase().trim();\r\n   for(var i =0;i<=str1.length-1;i++){\r\n   \r\n       for(var j =a;j<=str2.length-1;j++){\r\n           if(h){\r\n   \r\n            if(str1[i]==str2[j]){\r\n               a=j+1;\r\n                f+=1;\r\n              y=true; \r\n           h=false;\r\n           break; }  }\r\n   \r\n          else if(y){\r\n           if(str1[i]==str2[j]){f+=1;\r\n               a=j+1;\r\n              break;\r\n                  }\r\n          else{ y =false;\r\n          break;\r\n                  }\r\n               }          \r\n               } \r\n       \r\n       if(!y){break;}    \r\n   }\r\n   if(f==str1.length)\r\n   {\r\n       return true;\r\n   }\r\n   else {\r\n      return false;\r\n   }}\r\n\r\nfunction Collt(st1,datas){\r\nvar result;\r\nresult=datas.filter((data)=>{\r\n    var t=0;\r\n    if(SubStr(st1,data.name)){t+=1;}\r\n    \r\n    return t>0;\r\n})\r\n\r\n\r\nreturn result;\r\n}\r\nmodule.exports.Collt = Collt;"],"mappings":"AAAA;AACA,SAASA,MAAMA,CAAEC,KAAK,EAACC,KAAK,EAAC;EACzB,IAAIC,CAAC,GAAC,CAAC;EACR,IAAIC,CAAC,GAAC,CAAC;EACP,IAAIC,CAAC,GAAG,KAAK;EACb,IAAIC,CAAC,GAAG,IAAI;EACZ,MAAMC,IAAI,GAAEN,KAAK,CAACO,WAAW,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EACtC,MAAMC,IAAI,GAAER,KAAK,CAACM,WAAW,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EACtC,KAAI,IAAIE,CAAC,GAAE,CAAC,EAACA,CAAC,IAAEJ,IAAI,CAACK,MAAM,GAAC,CAAC,EAACD,CAAC,EAAE,EAAC;IAE9B,KAAI,IAAIE,CAAC,GAAET,CAAC,EAACS,CAAC,IAAEH,IAAI,CAACE,MAAM,GAAC,CAAC,EAACC,CAAC,EAAE,EAAC;MAC9B,IAAGP,CAAC,EAAC;QAEJ,IAAGC,IAAI,CAACI,CAAC,CAAC,IAAED,IAAI,CAACG,CAAC,CAAC,EAAC;UACjBT,CAAC,GAACS,CAAC,GAAC,CAAC;UACJV,CAAC,IAAE,CAAC;UACNE,CAAC,GAAC,IAAI;UACTC,CAAC,GAAC,KAAK;UACP;QAAO;MAAG,CAAC,MAEP,IAAGD,CAAC,EAAC;QACT,IAAGE,IAAI,CAACI,CAAC,CAAC,IAAED,IAAI,CAACG,CAAC,CAAC,EAAC;UAACV,CAAC,IAAE,CAAC;UACrBC,CAAC,GAACS,CAAC,GAAC,CAAC;UACN;QACI,CAAC,MACL;UAAER,CAAC,GAAE,KAAK;UACd;QACQ;MACH;IACA;IAER,IAAG,CAACA,CAAC,EAAC;MAAC;IAAM;EACjB;EACA,IAAGF,CAAC,IAAEI,IAAI,CAACK,MAAM,EACjB;IACI,OAAO,IAAI;EACf,CAAC,MACI;IACF,OAAO,KAAK;EACf;AAAC;AAACE,EAAA,GAtCId,MAAM;AAwCf,SAASe,KAAKA,CAACC,GAAG,EAACC,KAAK,EAAC;EACzB,IAAIC,MAAM;EACVA,MAAM,GAACD,KAAK,CAACE,MAAM,CAAEC,IAAI,IAAG;IACxB,IAAIC,CAAC,GAAC,CAAC;IACP,IAAGrB,MAAM,CAACgB,GAAG,EAACI,IAAI,CAACE,IAAI,CAAC,EAAC;MAACD,CAAC,IAAE,CAAC;IAAC;IAE/B,OAAOA,CAAC,GAAC,CAAC;EACd,CAAC,CAAC;EAGF,OAAOH,MAAM;AACb;AAACK,GAAA,GAXQR,KAAK;AAYdS,MAAM,CAACC,OAAO,CAACV,KAAK,GAAGA,KAAK;AAAC,IAAAD,EAAA,EAAAS,GAAA;AAAAG,YAAA,CAAAZ,EAAA;AAAAY,YAAA,CAAAH,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}